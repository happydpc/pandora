import subprocess
import os
import shutil

pandora_exe = ""
files_of_interest = ["output.jpg", "stats.json", "stream_stats.json"]

def run_pandora(arguments, out_folder):
    try:
        output = subprocess.check_output([pandora_exe] + arguments)
        pandora_path = os.path.basename(pandora_exe)
    except Exception as e:
        print(f"Error running pandora: {e}")
        return

    # Store the output (cout) to the output folder
    with open(os.path.join(out_folder, "cout.txt"), "w") as f:
        f.write(output)

    # Copy files generated by Pandora (like stats & final image) to the output folder
    for filename in files_of_interest:
        shutil.copyfile(os.path.join(pandora_path, filename), os.path.join(out_folder, filename))


def get_scenes():
    return [
		{
			"name": "crown",
			"file": "/scratch/mathijsmolenaa/pbf-scenes/crown.pbf",
			"subdiv": 5,
			"batch_point_size": 10000000, # 860M primitives => 132 batching points
			"max_geom_mem_mb": 20706, # 20.7GB => 20705820432 bytes
            "max_bvh_mem_mb": 6250 # 6.25GB => 11484004352 - 5234491392 = 6249512960 bytes
		},
		{
			"name": "landscape",
			"file": "/scratch/mathijsmolenaa/pbf-scenes/landscape-view0.pbf",
			"subdiv": 0,
			"batch_point_size": 20000000, # 4330M total / 25M unique primitives => 335 batching points
			"max_geom_mem_mb": 860, # 0.86GB => 859132556 bytes
            "max_bvh_mem_mb": 1380 # 1.38GB => 2868202912 - 1488687008 = 1379515904 bytes
		},
		{
			"name": "island",
			"file": "/scratch/mathijsmolenaa/pbf-scenes/island_all_cams_fixed_instance_duplicates.pbf",
			"subdiv": 0,
			"batch_point_size": 100000000, # => 504 batching points
			"max_geom_mem_mb": 8217, # 8.217GB => 8216115664 bytes
            "max_bvh_mem_mb": 8649 # 8.649GB => 22402346496 - 13753576064 = 8648770432 bytes
		}
	]