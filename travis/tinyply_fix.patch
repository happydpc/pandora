diff --git a/source/tinyply.h b/source/tinyply.h
index 1aca4c7..d3bfa9b 100644
--- a/source/tinyply.h
+++ b/source/tinyply.h
@@ -531,6 +531,7 @@ void PlyFile::PlyFileImpl::read(std::istream & is)
             case Type::UINT32:  endian_swap_buffer<uint32_t, uint32_t>(data_ptr, buffer_size_bytes, stride); break;
             case Type::FLOAT32: endian_swap_buffer<uint32_t, float>(data_ptr, buffer_size_bytes, stride);    break;
             case Type::FLOAT64: endian_swap_buffer<uint64_t, double>(data_ptr, buffer_size_bytes, stride);   break;
+            default: break;
             }
         }
     }
@@ -596,7 +597,7 @@ void PlyFile::PlyFileImpl::write_ascii_internal(std::ostream & os)
                 if (p.isList)
                 {
                     os << p.listCount << " ";
-                    for (int j = 0; j < p.listCount; ++j)
+                    for (size_t j = 0; j < p.listCount; ++j)
                     {
                         write_property_ascii(p.propertyType, os, (helper.data->buffer.get() + helper.cursor->byteOffset), helper.cursor->byteOffset);
                     }
@@ -769,6 +770,7 @@ void PlyFile::PlyFileImpl::parse_data(std::istream & is, bool firstPass)
             case Type::UINT16: endian_swap<uint16_t, uint16_t>(*(uint16_t*)dst); break;
             case Type::INT32:  endian_swap<int32_t, int32_t>(*(int32_t*)dst);    break;
             case Type::UINT32: endian_swap<uint32_t, uint32_t>(*(uint32_t*)dst); break;
+            default: break;
             }
         }
 
@@ -862,8 +864,8 @@ void PlyFile::PlyFileImpl::parse_data(std::istream & is, bool firstPass)
 
 // Wrap the public interface:
 
-PlyFile::PlyFile() { impl.reset(new PlyFileImpl()); };
-PlyFile::~PlyFile() { };
+PlyFile::PlyFile() { impl.reset(new PlyFileImpl()); }
+PlyFile::~PlyFile() { }
 bool PlyFile::parse_header(std::istream & is) { return impl->parse_header(is); }
 void PlyFile::read(std::istream & is) { return impl->read(is); }
 void PlyFile::write(std::ostream & os, bool isBinary) { return impl->write(os, isBinary); }
