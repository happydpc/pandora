// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WIVEBVH8_PANDORA_H_
#define FLATBUFFERS_GENERATED_WIVEBVH8_PANDORA_H_

#include "flatbuffers/flatbuffers.h"

#include "contiguous_allocator_generated.h"

namespace pandora {

struct SerializedWiVeBVH8;

struct SerializedWiVeBVH8 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_INNERNODEALLOCATOR = 4,
    VT_LEAFNODEALLOCATOR = 6,
    VT_COMPRESSEDROOTHANDLE = 8,
    VT_NUMLEAFOBJECTS = 10
  };
  const SerializedContiguousAllocator *innerNodeAllocator() const {
    return GetPointer<const SerializedContiguousAllocator *>(VT_INNERNODEALLOCATOR);
  }
  const SerializedContiguousAllocator *leafNodeAllocator() const {
    return GetPointer<const SerializedContiguousAllocator *>(VT_LEAFNODEALLOCATOR);
  }
  uint32_t compressedRootHandle() const {
    return GetField<uint32_t>(VT_COMPRESSEDROOTHANDLE, 0);
  }
  uint32_t numLeafObjects() const {
    return GetField<uint32_t>(VT_NUMLEAFOBJECTS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INNERNODEALLOCATOR) &&
           verifier.VerifyTable(innerNodeAllocator()) &&
           VerifyOffset(verifier, VT_LEAFNODEALLOCATOR) &&
           verifier.VerifyTable(leafNodeAllocator()) &&
           VerifyField<uint32_t>(verifier, VT_COMPRESSEDROOTHANDLE) &&
           VerifyField<uint32_t>(verifier, VT_NUMLEAFOBJECTS) &&
           verifier.EndTable();
  }
};

struct SerializedWiVeBVH8Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_innerNodeAllocator(flatbuffers::Offset<SerializedContiguousAllocator> innerNodeAllocator) {
    fbb_.AddOffset(SerializedWiVeBVH8::VT_INNERNODEALLOCATOR, innerNodeAllocator);
  }
  void add_leafNodeAllocator(flatbuffers::Offset<SerializedContiguousAllocator> leafNodeAllocator) {
    fbb_.AddOffset(SerializedWiVeBVH8::VT_LEAFNODEALLOCATOR, leafNodeAllocator);
  }
  void add_compressedRootHandle(uint32_t compressedRootHandle) {
    fbb_.AddElement<uint32_t>(SerializedWiVeBVH8::VT_COMPRESSEDROOTHANDLE, compressedRootHandle, 0);
  }
  void add_numLeafObjects(uint32_t numLeafObjects) {
    fbb_.AddElement<uint32_t>(SerializedWiVeBVH8::VT_NUMLEAFOBJECTS, numLeafObjects, 0);
  }
  explicit SerializedWiVeBVH8Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SerializedWiVeBVH8Builder &operator=(const SerializedWiVeBVH8Builder &);
  flatbuffers::Offset<SerializedWiVeBVH8> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SerializedWiVeBVH8>(end);
    return o;
  }
};

inline flatbuffers::Offset<SerializedWiVeBVH8> CreateSerializedWiVeBVH8(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<SerializedContiguousAllocator> innerNodeAllocator = 0,
    flatbuffers::Offset<SerializedContiguousAllocator> leafNodeAllocator = 0,
    uint32_t compressedRootHandle = 0,
    uint32_t numLeafObjects = 0) {
  SerializedWiVeBVH8Builder builder_(_fbb);
  builder_.add_numLeafObjects(numLeafObjects);
  builder_.add_compressedRootHandle(compressedRootHandle);
  builder_.add_leafNodeAllocator(leafNodeAllocator);
  builder_.add_innerNodeAllocator(innerNodeAllocator);
  return builder_.Finish();
}

inline const pandora::SerializedWiVeBVH8 *GetSerializedWiVeBVH8(const void *buf) {
  return flatbuffers::GetRoot<pandora::SerializedWiVeBVH8>(buf);
}

inline const pandora::SerializedWiVeBVH8 *GetSizePrefixedSerializedWiVeBVH8(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<pandora::SerializedWiVeBVH8>(buf);
}

inline bool VerifySerializedWiVeBVH8Buffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<pandora::SerializedWiVeBVH8>(nullptr);
}

inline bool VerifySizePrefixedSerializedWiVeBVH8Buffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<pandora::SerializedWiVeBVH8>(nullptr);
}

inline void FinishSerializedWiVeBVH8Buffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<pandora::SerializedWiVeBVH8> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSerializedWiVeBVH8Buffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<pandora::SerializedWiVeBVH8> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace pandora

#endif  // FLATBUFFERS_GENERATED_WIVEBVH8_PANDORA_H_
