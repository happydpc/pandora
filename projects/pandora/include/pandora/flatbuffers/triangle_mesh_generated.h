// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TRIANGLEMESH_PANDORA_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_TRIANGLEMESH_PANDORA_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

namespace pandora {
namespace serialization {

struct TriangleMesh;

struct TriangleMesh FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NUMTRIANGLES = 4,
    VT_NUMVERTICES = 6,
    VT_TRIANGLES = 8,
    VT_POSITIONS = 10,
    VT_NORMALS = 12,
    VT_TANGENTS = 14,
    VT_UVCOORDS = 16
  };
  uint32_t numTriangles() const {
    return GetField<uint32_t>(VT_NUMTRIANGLES, 0);
  }
  uint32_t numVertices() const {
    return GetField<uint32_t>(VT_NUMVERTICES, 0);
  }
  const flatbuffers::Vector<int8_t> *triangles() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_TRIANGLES);
  }
  const flatbuffers::Vector<int8_t> *positions() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_POSITIONS);
  }
  const flatbuffers::Vector<int8_t> *normals() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_NORMALS);
  }
  const flatbuffers::Vector<int8_t> *tangents() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_TANGENTS);
  }
  const flatbuffers::Vector<int8_t> *uvCoords() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_UVCOORDS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_NUMTRIANGLES) &&
           VerifyField<uint32_t>(verifier, VT_NUMVERTICES) &&
           VerifyOffset(verifier, VT_TRIANGLES) &&
           verifier.Verify(triangles()) &&
           VerifyOffset(verifier, VT_POSITIONS) &&
           verifier.Verify(positions()) &&
           VerifyOffset(verifier, VT_NORMALS) &&
           verifier.Verify(normals()) &&
           VerifyOffset(verifier, VT_TANGENTS) &&
           verifier.Verify(tangents()) &&
           VerifyOffset(verifier, VT_UVCOORDS) &&
           verifier.Verify(uvCoords()) &&
           verifier.EndTable();
  }
};

struct TriangleMeshBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_numTriangles(uint32_t numTriangles) {
    fbb_.AddElement<uint32_t>(TriangleMesh::VT_NUMTRIANGLES, numTriangles, 0);
  }
  void add_numVertices(uint32_t numVertices) {
    fbb_.AddElement<uint32_t>(TriangleMesh::VT_NUMVERTICES, numVertices, 0);
  }
  void add_triangles(flatbuffers::Offset<flatbuffers::Vector<int8_t>> triangles) {
    fbb_.AddOffset(TriangleMesh::VT_TRIANGLES, triangles);
  }
  void add_positions(flatbuffers::Offset<flatbuffers::Vector<int8_t>> positions) {
    fbb_.AddOffset(TriangleMesh::VT_POSITIONS, positions);
  }
  void add_normals(flatbuffers::Offset<flatbuffers::Vector<int8_t>> normals) {
    fbb_.AddOffset(TriangleMesh::VT_NORMALS, normals);
  }
  void add_tangents(flatbuffers::Offset<flatbuffers::Vector<int8_t>> tangents) {
    fbb_.AddOffset(TriangleMesh::VT_TANGENTS, tangents);
  }
  void add_uvCoords(flatbuffers::Offset<flatbuffers::Vector<int8_t>> uvCoords) {
    fbb_.AddOffset(TriangleMesh::VT_UVCOORDS, uvCoords);
  }
  explicit TriangleMeshBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TriangleMeshBuilder &operator=(const TriangleMeshBuilder &);
  flatbuffers::Offset<TriangleMesh> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TriangleMesh>(end);
    return o;
  }
};

inline flatbuffers::Offset<TriangleMesh> CreateTriangleMesh(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t numTriangles = 0,
    uint32_t numVertices = 0,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> triangles = 0,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> positions = 0,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> normals = 0,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> tangents = 0,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> uvCoords = 0) {
  TriangleMeshBuilder builder_(_fbb);
  builder_.add_uvCoords(uvCoords);
  builder_.add_tangents(tangents);
  builder_.add_normals(normals);
  builder_.add_positions(positions);
  builder_.add_triangles(triangles);
  builder_.add_numVertices(numVertices);
  builder_.add_numTriangles(numTriangles);
  return builder_.Finish();
}

inline flatbuffers::Offset<TriangleMesh> CreateTriangleMeshDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t numTriangles = 0,
    uint32_t numVertices = 0,
    const std::vector<int8_t> *triangles = nullptr,
    const std::vector<int8_t> *positions = nullptr,
    const std::vector<int8_t> *normals = nullptr,
    const std::vector<int8_t> *tangents = nullptr,
    const std::vector<int8_t> *uvCoords = nullptr) {
  return pandora::serialization::CreateTriangleMesh(
      _fbb,
      numTriangles,
      numVertices,
      triangles ? _fbb.CreateVector<int8_t>(*triangles) : 0,
      positions ? _fbb.CreateVector<int8_t>(*positions) : 0,
      normals ? _fbb.CreateVector<int8_t>(*normals) : 0,
      tangents ? _fbb.CreateVector<int8_t>(*tangents) : 0,
      uvCoords ? _fbb.CreateVector<int8_t>(*uvCoords) : 0);
}

inline const pandora::serialization::TriangleMesh *GetTriangleMesh(const void *buf) {
  return flatbuffers::GetRoot<pandora::serialization::TriangleMesh>(buf);
}

inline const pandora::serialization::TriangleMesh *GetSizePrefixedTriangleMesh(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<pandora::serialization::TriangleMesh>(buf);
}

inline bool VerifyTriangleMeshBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<pandora::serialization::TriangleMesh>(nullptr);
}

inline bool VerifySizePrefixedTriangleMeshBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<pandora::serialization::TriangleMesh>(nullptr);
}

inline void FinishTriangleMeshBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<pandora::serialization::TriangleMesh> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTriangleMeshBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<pandora::serialization::TriangleMesh> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace serialization
}  // namespace pandora

#endif  // FLATBUFFERS_GENERATED_TRIANGLEMESH_PANDORA_SERIALIZATION_H_
