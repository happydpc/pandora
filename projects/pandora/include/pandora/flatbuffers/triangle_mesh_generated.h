// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TRIANGLEMESH_PANDORA_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_TRIANGLEMESH_PANDORA_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

#include "data_types_generated.h"

namespace pandora {
namespace serialization {

struct TriangleMesh;

struct TriangleMesh FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INDICES = 4,
    VT_POSITIONS = 6,
    VT_NORMALS = 8,
    VT_TANGENTS = 10,
    VT_UVCOORDS = 12,
    VT_BOUNDS = 14
  };
  const flatbuffers::Vector<const Vec3u *> *indices() const {
    return GetPointer<const flatbuffers::Vector<const Vec3u *> *>(VT_INDICES);
  }
  flatbuffers::Vector<const Vec3u *> *mutable_indices() {
    return GetPointer<flatbuffers::Vector<const Vec3u *> *>(VT_INDICES);
  }
  const flatbuffers::Vector<const Vec3 *> *positions() const {
    return GetPointer<const flatbuffers::Vector<const Vec3 *> *>(VT_POSITIONS);
  }
  flatbuffers::Vector<const Vec3 *> *mutable_positions() {
    return GetPointer<flatbuffers::Vector<const Vec3 *> *>(VT_POSITIONS);
  }
  const flatbuffers::Vector<const Vec3 *> *normals() const {
    return GetPointer<const flatbuffers::Vector<const Vec3 *> *>(VT_NORMALS);
  }
  flatbuffers::Vector<const Vec3 *> *mutable_normals() {
    return GetPointer<flatbuffers::Vector<const Vec3 *> *>(VT_NORMALS);
  }
  const flatbuffers::Vector<const Vec3 *> *tangents() const {
    return GetPointer<const flatbuffers::Vector<const Vec3 *> *>(VT_TANGENTS);
  }
  flatbuffers::Vector<const Vec3 *> *mutable_tangents() {
    return GetPointer<flatbuffers::Vector<const Vec3 *> *>(VT_TANGENTS);
  }
  const flatbuffers::Vector<const Vec2 *> *uvCoords() const {
    return GetPointer<const flatbuffers::Vector<const Vec2 *> *>(VT_UVCOORDS);
  }
  flatbuffers::Vector<const Vec2 *> *mutable_uvCoords() {
    return GetPointer<flatbuffers::Vector<const Vec2 *> *>(VT_UVCOORDS);
  }
  const Bounds *bounds() const {
    return GetStruct<const Bounds *>(VT_BOUNDS);
  }
  Bounds *mutable_bounds() {
    return GetStruct<Bounds *>(VT_BOUNDS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INDICES) &&
           verifier.VerifyVector(indices()) &&
           VerifyOffset(verifier, VT_POSITIONS) &&
           verifier.VerifyVector(positions()) &&
           VerifyOffset(verifier, VT_NORMALS) &&
           verifier.VerifyVector(normals()) &&
           VerifyOffset(verifier, VT_TANGENTS) &&
           verifier.VerifyVector(tangents()) &&
           VerifyOffset(verifier, VT_UVCOORDS) &&
           verifier.VerifyVector(uvCoords()) &&
           VerifyField<Bounds>(verifier, VT_BOUNDS) &&
           verifier.EndTable();
  }
};

struct TriangleMeshBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_indices(flatbuffers::Offset<flatbuffers::Vector<const Vec3u *>> indices) {
    fbb_.AddOffset(TriangleMesh::VT_INDICES, indices);
  }
  void add_positions(flatbuffers::Offset<flatbuffers::Vector<const Vec3 *>> positions) {
    fbb_.AddOffset(TriangleMesh::VT_POSITIONS, positions);
  }
  void add_normals(flatbuffers::Offset<flatbuffers::Vector<const Vec3 *>> normals) {
    fbb_.AddOffset(TriangleMesh::VT_NORMALS, normals);
  }
  void add_tangents(flatbuffers::Offset<flatbuffers::Vector<const Vec3 *>> tangents) {
    fbb_.AddOffset(TriangleMesh::VT_TANGENTS, tangents);
  }
  void add_uvCoords(flatbuffers::Offset<flatbuffers::Vector<const Vec2 *>> uvCoords) {
    fbb_.AddOffset(TriangleMesh::VT_UVCOORDS, uvCoords);
  }
  void add_bounds(const Bounds *bounds) {
    fbb_.AddStruct(TriangleMesh::VT_BOUNDS, bounds);
  }
  explicit TriangleMeshBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TriangleMeshBuilder &operator=(const TriangleMeshBuilder &);
  flatbuffers::Offset<TriangleMesh> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TriangleMesh>(end);
    return o;
  }
};

inline flatbuffers::Offset<TriangleMesh> CreateTriangleMesh(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const Vec3u *>> indices = 0,
    flatbuffers::Offset<flatbuffers::Vector<const Vec3 *>> positions = 0,
    flatbuffers::Offset<flatbuffers::Vector<const Vec3 *>> normals = 0,
    flatbuffers::Offset<flatbuffers::Vector<const Vec3 *>> tangents = 0,
    flatbuffers::Offset<flatbuffers::Vector<const Vec2 *>> uvCoords = 0,
    const Bounds *bounds = 0) {
  TriangleMeshBuilder builder_(_fbb);
  builder_.add_bounds(bounds);
  builder_.add_uvCoords(uvCoords);
  builder_.add_tangents(tangents);
  builder_.add_normals(normals);
  builder_.add_positions(positions);
  builder_.add_indices(indices);
  return builder_.Finish();
}

inline flatbuffers::Offset<TriangleMesh> CreateTriangleMeshDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<Vec3u> *indices = nullptr,
    const std::vector<Vec3> *positions = nullptr,
    const std::vector<Vec3> *normals = nullptr,
    const std::vector<Vec3> *tangents = nullptr,
    const std::vector<Vec2> *uvCoords = nullptr,
    const Bounds *bounds = 0) {
  auto indices__ = indices ? _fbb.CreateVectorOfStructs<Vec3u>(*indices) : 0;
  auto positions__ = positions ? _fbb.CreateVectorOfStructs<Vec3>(*positions) : 0;
  auto normals__ = normals ? _fbb.CreateVectorOfStructs<Vec3>(*normals) : 0;
  auto tangents__ = tangents ? _fbb.CreateVectorOfStructs<Vec3>(*tangents) : 0;
  auto uvCoords__ = uvCoords ? _fbb.CreateVectorOfStructs<Vec2>(*uvCoords) : 0;
  return pandora::serialization::CreateTriangleMesh(
      _fbb,
      indices__,
      positions__,
      normals__,
      tangents__,
      uvCoords__,
      bounds);
}

inline const pandora::serialization::TriangleMesh *GetTriangleMesh(const void *buf) {
  return flatbuffers::GetRoot<pandora::serialization::TriangleMesh>(buf);
}

inline const pandora::serialization::TriangleMesh *GetSizePrefixedTriangleMesh(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<pandora::serialization::TriangleMesh>(buf);
}

inline TriangleMesh *GetMutableTriangleMesh(void *buf) {
  return flatbuffers::GetMutableRoot<TriangleMesh>(buf);
}

inline bool VerifyTriangleMeshBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<pandora::serialization::TriangleMesh>(nullptr);
}

inline bool VerifySizePrefixedTriangleMeshBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<pandora::serialization::TriangleMesh>(nullptr);
}

inline void FinishTriangleMeshBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<pandora::serialization::TriangleMesh> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTriangleMeshBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<pandora::serialization::TriangleMesh> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace serialization
}  // namespace pandora

#endif  // FLATBUFFERS_GENERATED_TRIANGLEMESH_PANDORA_SERIALIZATION_H_
