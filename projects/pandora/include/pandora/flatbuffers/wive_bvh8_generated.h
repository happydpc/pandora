// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WIVEBVH8_PANDORA_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_WIVEBVH8_PANDORA_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

#include "contiguous_allocator_generated.h"

namespace pandora {
namespace serialization {

struct WiVeBVH8;

struct WiVeBVH8 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_INNERNODEALLOCATOR = 4,
    VT_LEAFINDEXALLOCATOR = 6,
    VT_COMPRESSEDROOTHANDLE = 8,
    VT_NUMLEAFOBJECTS = 10
  };
  const ContiguousAllocator *innerNodeAllocator() const {
    return GetPointer<const ContiguousAllocator *>(VT_INNERNODEALLOCATOR);
  }
  ContiguousAllocator *mutable_innerNodeAllocator() {
    return GetPointer<ContiguousAllocator *>(VT_INNERNODEALLOCATOR);
  }
  const ContiguousAllocator *leafIndexAllocator() const {
    return GetPointer<const ContiguousAllocator *>(VT_LEAFINDEXALLOCATOR);
  }
  ContiguousAllocator *mutable_leafIndexAllocator() {
    return GetPointer<ContiguousAllocator *>(VT_LEAFINDEXALLOCATOR);
  }
  uint32_t compressedRootHandle() const {
    return GetField<uint32_t>(VT_COMPRESSEDROOTHANDLE, 0);
  }
  bool mutate_compressedRootHandle(uint32_t _compressedRootHandle) {
    return SetField<uint32_t>(VT_COMPRESSEDROOTHANDLE, _compressedRootHandle, 0);
  }
  uint64_t numLeafObjects() const {
    return GetField<uint64_t>(VT_NUMLEAFOBJECTS, 0);
  }
  bool mutate_numLeafObjects(uint64_t _numLeafObjects) {
    return SetField<uint64_t>(VT_NUMLEAFOBJECTS, _numLeafObjects, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INNERNODEALLOCATOR) &&
           verifier.VerifyTable(innerNodeAllocator()) &&
           VerifyOffset(verifier, VT_LEAFINDEXALLOCATOR) &&
           verifier.VerifyTable(leafIndexAllocator()) &&
           VerifyField<uint32_t>(verifier, VT_COMPRESSEDROOTHANDLE) &&
           VerifyField<uint64_t>(verifier, VT_NUMLEAFOBJECTS) &&
           verifier.EndTable();
  }
};

struct WiVeBVH8Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_innerNodeAllocator(flatbuffers::Offset<ContiguousAllocator> innerNodeAllocator) {
    fbb_.AddOffset(WiVeBVH8::VT_INNERNODEALLOCATOR, innerNodeAllocator);
  }
  void add_leafIndexAllocator(flatbuffers::Offset<ContiguousAllocator> leafIndexAllocator) {
    fbb_.AddOffset(WiVeBVH8::VT_LEAFINDEXALLOCATOR, leafIndexAllocator);
  }
  void add_compressedRootHandle(uint32_t compressedRootHandle) {
    fbb_.AddElement<uint32_t>(WiVeBVH8::VT_COMPRESSEDROOTHANDLE, compressedRootHandle, 0);
  }
  void add_numLeafObjects(uint64_t numLeafObjects) {
    fbb_.AddElement<uint64_t>(WiVeBVH8::VT_NUMLEAFOBJECTS, numLeafObjects, 0);
  }
  explicit WiVeBVH8Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  WiVeBVH8Builder &operator=(const WiVeBVH8Builder &);
  flatbuffers::Offset<WiVeBVH8> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WiVeBVH8>(end);
    return o;
  }
};

inline flatbuffers::Offset<WiVeBVH8> CreateWiVeBVH8(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<ContiguousAllocator> innerNodeAllocator = 0,
    flatbuffers::Offset<ContiguousAllocator> leafIndexAllocator = 0,
    uint32_t compressedRootHandle = 0,
    uint64_t numLeafObjects = 0) {
  WiVeBVH8Builder builder_(_fbb);
  builder_.add_numLeafObjects(numLeafObjects);
  builder_.add_compressedRootHandle(compressedRootHandle);
  builder_.add_leafIndexAllocator(leafIndexAllocator);
  builder_.add_innerNodeAllocator(innerNodeAllocator);
  return builder_.Finish();
}

inline const pandora::serialization::WiVeBVH8 *GetWiVeBVH8(const void *buf) {
  return flatbuffers::GetRoot<pandora::serialization::WiVeBVH8>(buf);
}

inline const pandora::serialization::WiVeBVH8 *GetSizePrefixedWiVeBVH8(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<pandora::serialization::WiVeBVH8>(buf);
}

inline WiVeBVH8 *GetMutableWiVeBVH8(void *buf) {
  return flatbuffers::GetMutableRoot<WiVeBVH8>(buf);
}

inline bool VerifyWiVeBVH8Buffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<pandora::serialization::WiVeBVH8>(nullptr);
}

inline bool VerifySizePrefixedWiVeBVH8Buffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<pandora::serialization::WiVeBVH8>(nullptr);
}

inline void FinishWiVeBVH8Buffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<pandora::serialization::WiVeBVH8> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedWiVeBVH8Buffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<pandora::serialization::WiVeBVH8> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace serialization
}  // namespace pandora

#endif  // FLATBUFFERS_GENERATED_WIVEBVH8_PANDORA_SERIALIZATION_H_
