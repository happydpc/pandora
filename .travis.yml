# Based on: https://github.com/Microsoft/GSL/blob/master/.travis.yml
# But with more recent compilers because of C++17 support
language: generic
sudo: false
notifications:
  email: false

# Safelist
branches:
  only:
    - master
    - fix-travis

os: linux
dist: trusty

cache:
  directories:
    - ${HOME}/deps/
    - ${HOME}/downloads/
  timeout: 1800

matrix:
  include:
    ##########################################################################
    # GCC on Linux
    ##########################################################################
    - env: CXX=g++-8 CC=gcc-8 BUILD_TYPE=Debug
      addons: &gcc8
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - ninja-build
            - gcc-8
            - g++-8
            - libtbb-dev
            - git 
            - unzip
            - tar
            - curl

    #- env: COMPILER=g++-8 BUILD_TYPE=Release
    #  addons: *gcc8


    ##########################################################################
    # Clang on Linux
    ##########################################################################
    # Debug with libc++   --> the libc++ packages on Travis are outdated and dont support C++17
    # - env: CXX=clang++-5.0 CC=clang-5.0 BUILD_TYPE=Debug USE_STDLIB=libc++
    #   addons: &clang50libcpp
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #         - llvm-toolchain-trusty-5.0
    #       packages:
    #         - ninja-build
    #         - clang-5.0
    #         - gcc-7
    #         - g++-7
    #         - libc++-dev
    #         - libc++abi-dev
    #         - libtbb-dev
    #         - git 
    #         - unzip
    #         - tar
    #         - curl

    # Debug with stdlibc++
    - env: CXX=clang++-6.0 CC=clang-6.0 BUILD_TYPE=Debug CPP_FLAGS="-DTBB_USE_GLIBCXX_VERSION=70200"
      addons: &clang60
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-6.0
          packages:
            - ninja-build
            - clang-6.0
            - gcc-8
            - g++-8
            - libtbb-dev
            - git 
            - unzip
            - tar
            - curl

    # Release with libc++
    #- env: COMPILER=clang++-5.0 BUILD_TYPE=Release USE_STDLIB=libc++
    #  addons: *clang50

    # Release with stdlibc++
    #- env: COMPILER=clang++-5.0 BUILD_TYPE=Release
    #  addons: *clang50

install:
  # Dependencies required by the CI are installed in ${TRAVIS_BUILD_DIR}/deps/
  - DEPS_DIR="${HOME}/deps/"
  - DEPS_DOWNLOAD_DIR="${HOME}/downloads/"
  #- CMAKE_PREFIX_PATH="${DEPS_DIR}/config_files/"
  - mkdir -p "${DEPS_DIR}"
  - mkdir -p "${DEPS_DOWNLOAD_DIR}"
  #- mkdir -p "${CMAKE_PREFIX_PATH}"

  # Travis machines have 2 cores
  - JOBS=1

  ############################################################################
  # Install a recent CMake (unless already installed on OS X)
  ############################################################################
  - cd "${DEPS_DIR}"
  - CMAKE_VERSION=3.10.0
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_PATH="${DEPS_DIR}/cmake/bin"
      if [ ! -d "${CMAKE_PATH}" ]; then
        CMAKE_URL="https://cmake.org/files/v${CMAKE_VERSION%.[0-9]}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz"
        mkdir cmake && travis_retry wget --no-check-certificate -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      fi
      export PATH=${CMAKE_PATH}:${PATH}
    else
      brew install cmake || brew upgrade cmake
    fi
  - cmake --version

  # Download and install vcpkg
  - VCPKG_ROOT="${DEPS_DIR}/vcpkg"
  - |
    if [ ! -d "${VCPKG_ROOT}" ]; then
      cd "${DEPS_DIR}"
      git clone https://github.com/Microsoft/vcpkg --depth 1 vcpkg
      cd vcpkg
      # Compile with gcc/g++ because vcpkg forces the user to use (modern, inc file system TS) libc++ with clang
      CC_BAK=${CC}
      CXX_BAK=${CXX}
      CC=gcc-8
      CXX=g++-8
      # Compile vcpkg with a single thread to prevent out-of-memory compiler crashes
      sed -i '205s/--build ./--build . -- -j1/' scripts/bootstrap.sh
      ./bootstrap-vcpkg.sh
      ./vcpkg integrate install
      CC=${CC_BAK}
      CXX=${CXX_BAK}
    else
      cd "${DEPS_DIR}/vcpkg/"
    fi
  
  # Install dependencies
  - ./vcpkg install gtest
  #- ./vcpkg install tbb
  #- ./vcpkg install embree
  #- ./vcpkg install assimp# The installed *.lib file stored in ASSIMP_LIBRARIES is for Windows not Linux
  - ./vcpkg install ms-gsl
  - ./vcpkg install glm

  # Download and install Embree from source because vcpkg does not support TBB yet on Linux (which it depends on)
  # Debug mode & SSE2 because compilation takes ages
  - EMBREE_ROOT="${DEPS_DIR}/embree/"
  - |
    if [ ! -d "${EMBREE_ROOT}" ]; then
      cd "${DEPS_DOWNLOAD_DIR}"
      git clone git@github.com:embree/embree.git -b release --depth 1 embree
      cd embree
      mkdir build
      cd build
      cmake -GNinja -DCMAKE_BUILD_TYPE=Debug -DEMBREE_MAX_ISA=SSE2 -DEMBREE_TUTORIALS=OFF -DEMBREE_ISPC_SUPPORT=OFF -DEMBREE_GEOMETRY_CURVE=OFF -DEMBREE_GEOMETRY_SUBDIVISION=OFF -DCMAKE_INSTALL_PREFIX="${EMBREE_ROOT}" ../
      ninja -j${JOBS}
      ninja install
      cp "embree-config.cmake" "${EMBREE_ROOT}"
      cp "embree-config-install.cmake" "${EMBREE_ROOT}"
    fi

  # Untill vcpkg gets fixed
  - ASSIMP_ROOT="${DEPS_DIR}/assimp/"
  - |
    if [ ! -d "${ASSIMP_ROOT}" ]; then
      cd "${DEPS_DOWNLOAD_DIR}"
      git clone git@github.com:assimp/assimp.git --depth 1 assimp
      cd assimp
      mkdir build
      cd build
      cmake -GNinja -DCMAKE_INSTALL_PREFIX="${ASSIMP_ROOT}" ../
      ninja -j${JOBS}
      ninja install
      cp "assimp-config.cmake" "${ASSIMP_ROOT}"
    fi

  # Download TBB because find_package(tbb) doesnt want to work for some dumb reason
  - TBB_ROOT="${DEPS_DIR}/tbb/"
  - |
    if [ ! -d "${TBB_ROOT}" ]; then
      cd "${DEPS_DIR}"
      git clone https://github.com/01org/tbb.git --depth 1 tbb
    fi

before_script:
  # Add libc++ flag when specified in USE_STDLIB
  - |
    if [[ "$USE_STDLIB" == "libc++" ]]; then
      export CPP_FLAGS="-stdlib=libc++ ${CPP_FLAGS}"
    fi

  # Use CMake to generate build files
  - cd "${TRAVIS_BUILD_DIR}"
  - mkdir build && cd build
  - cmake -GNinja -DCMAKE_C_COMPILER=${CC} -DCMAKE_CXX_COMPILER=${CXX} -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_CXX_FLAGS="${CPP_FLAGS}" -DBUILD_ATLAS=OFF -DBUILD_TESTS=ON -Dassimp_DIR="${ASSIMP_ROOT}" -Dembree_DIR="${EMBREE_ROOT}" -DTBB_FROM_SOURCE=ON -DTBB_ROOT=${TBB_ROOT} -DCMAKE_TOOLCHAIN_FILE="${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" ../
  
script:
  # build and run tests
  - cmake --build . -- -j${JOBS}
  - ctest --output-on-failure -j${JOBS}
